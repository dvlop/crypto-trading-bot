const config = require('./conf')
const BtceService = require('btc-e-v3')
const sendMessage = require( './libs/telegram')
const colors = require('colors')
const moment = require('moment')
const BFX = require('bitfinex-api-node')

const bws = new BFX(config.key, config.secret, {
  version: 2,
  transform: true
})

const ws = bws.ws
const rest = bws.rest

ws.on('open', () => {
  ws.subscribeTrades('BTCUSD')
})

rest.makeAuthRequest('/auth/r/orders', {}, (err, res, body) => {
  if (err) return false

  console.log('res', res)
})

class TraderBot {
  constructor () {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.btce = null // new BtceService({ publicKey: config.key, secretKey: config.secret })

    // –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    this.history = []

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã
    this.orders = []

    // –°–≤–µ—á–∏
    this.candles = []

    // –ó–∞–¥–∞—á–∞
    this.task = null

    // –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    this.income = 0
  }

  init () {
    this.console('–°—Ç–∞—Ä—Ç –±–æ—Ç–∞'.green)

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    this.trades()

    // –ó–∞–Ω–æ—Å–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã –≤ –º–∞—Å—Å–∏–≤
    // setInterval(() => this.observeActiveOrders(), 1000)

    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—Ä–¥–µ—Ä–∞–º–∏
    // setInterval(() => this.observeOrders(), 1000)

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ
    // setInterval(() => this.observe(), 60000)
  }

  // –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  findHistory (id) {
    for (let item of this.history) {
      if (id === item.ID) return true
    }
    return false
  }

  memoryUsage () {
    setInterval(() => {
      const used = process.memoryUsage().heapUsed / 1024 / 1024;
      console.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);
    }, 1000)
  }

  // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
  async lastTransaction () {
    try {
      // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
      const trandeHistory = await this.btce.tradeHistory({ from: 0, count: 1 })
      let last = null
      for (let item in trandeHistory) {
        if (!last) {
          last = trandeHistory[item]
          last.id = item
        }
      }
      return last
    } catch (e) {
      return { type: 'sell' }
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
  removeOrder (id) {
    // return this.orders.filter(item => item !== id)
    for (let key in this.orders) {
    	if (this.orders[key] === id) {
    		this.orders.splice(key, 1)
    	}
    }
  }
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
  getMarkupPrice (rate) {
    return parseFloat(((rate * ((config.markup + config.commission) / 100)) + rate).toFixed(3))
  }

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Å–∏—é
  getCommission (amount) {
    return parseFloat((amount - (amount * (1 - (config.commission / 100)))).toFixed(8))
  }

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –∏—Å—Ö–æ–¥—è –∏–∑ –∫—É—Ä—Å–∞ –∏ —Å—É–º–º—ã –¥–µ–Ω–µ–≥
  async buyAmount (rate) {
    const info = await this.btce.getInfo()
    return parseFloat((info.funds.usd / rate).toFixed(8))
  }

  // –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
  async sale (rate, amount) {
    try {
      // –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
      let price = this.getMarkupPrice(rate)

      // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
      let buy = await this.btce.trade({
        pair: config.pair,
        type: 'sell',
        rate: price,
        amount: parseFloat((amount - this.getCommission(amount)).toFixed(8))
      })
    } catch (e) {
      this.console('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏', e.error)
    }
  }

  // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
  console (text, params = '') {
    console.log(`${text}`, params, `[${moment().format('LLL')}]`)
  }

  // –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –ø–æ –∏—Å—Ç–∏—á–µ–Ω–∏—é 15 –º–∏–Ω—É—Ç
  async orderCancelLimit (id, order) {
    // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if (order.status === 1) return false

    let currentTime = Math.floor(Date.now() / 1000)

    // –ï—Å–ª–∏ —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ –ø—Ä–æ—à–µ–ª, –æ—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
    if (currentTime > (order.timestamp_created + config.timeOrder)) {
      try {
        // –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
        await this.btce.cancelOrder(id)

        // –°–æ–æ–±—â–∞–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        this.console(`${id} –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫`)

        return true
      } catch (e) {
        this.console(`Error orderCancelLimit: ${order.id}`)

        // –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        return false
      }
    }
    // –°—Ä–æ–∫ –æ—Ä–¥–µ—Ä–∞ –µ—â–µ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω
    return false
  }

  // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—Ä–¥–µ—Ä–∞–º–∏
  async observeOrders () {
    this.orders.map(async id => {
      try {
        const info = await this.btce.orderInfo(id)
        const order = info[id]

        // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        if (order.status === 2) {
          this.removeOrder(id)
          return false
        }

        // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Å—Ä–æ–∫ –ø—Ä–æ—à–µ–ª
        // –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∫—É–ø–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
        if (order.status === 3) {
          this.console('–û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω:', order)

          // –û–±—ä–µ–º, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∫—É–ø–∏–ª–∏
          const buyAmount = (order.start_amount - order.amount)

          // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫—É–ø–ª–µ
          sendMessage(`üí∞ –ß–∞—Å—Ç–∏—á–Ω–æ –∫—É–ø–∏–ª–∏ ${buyAmount} btc –∏–∑ ${order.start_amount} btc –ø–æ –∫—É—Ä—Å—É ${order.rate}\n order_id: ${id}`)

          // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
          const markupPrice = this.getMarkupPrice(order.rate)

          // –í—ã—Å—Ç–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∫—É–ø–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
          this.task = {
            type: 'sell',
            price: markupPrice,
            minPrice: markupPrice, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
            maxPrice: markupPrice, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
            amount: buyAmount
          }
          // await this.sale(order.rate, buyAmount)

          // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä
          this.removeOrder(id)

          return false
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
        if (order.type === 'buy' && await this.orderCancelLimit(id, order)) return false

        // –û–ø–æ–≤–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
        if (order.status !== 1) return false

        if (order.type === 'buy') {

          // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫—É–ø–ª–µ
          sendMessage(`üí∞ –ö—É–ø–∏–ª–∏ ${order.start_amount} BTC –ø–æ –∫—É—Ä—Å—É ${order.rate}\n order_id: ${id}`)

          // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
          const markupPrice = this.getMarkupPrice(order.rate)

          // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
          this.task = {
            type: 'sell',
            price: markupPrice,
            minPrice: markupPrice, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
            maxPrice: markupPrice, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
            amount: order.start_amount
          }
        } else {
          // –û–ø–æ–≤–µ—â–∞–µ–º –æ –ø—Ä–æ–¥–∞–∂–µ
          sendMessage(`üéâ –ü—Ä–æ–¥–∞–ª–∏ ${order.start_amount} BTC –ø–æ –∫—É—Ä—Å—É ${order.rate}\n–Ω–∞—Ü–µ–Ω–∫–∞: ${order.markup}%\norder: ${id}`)
        }

        // –£–¥–∞–ª—è–µ–º –æ—Ä–¥–µ—Ä –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        this.removeOrder(id)

      } catch (e) {
        this.console('Error observeOrders:', e.error)
      }
    })
  }

  // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏
  async observeActiveOrders () {
    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
      const activeOrders = await this.btce.activeOrders(config.pair)
      for (let id in activeOrders) {
        if (!this.orders.filter(item => item === id).length) {
          this.orders.push(id)
        }
      }
    } catch (e) {
      // if (e.error !== 'no orders') {
      //   this.console('Error observeActiveOrders')
      // }
    }
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫—É–ø–ª–∏/–ø—Ä–æ–¥–∞–∂–∏
  trades () {
    ws.on('trade', async (pair, trades) => {
      const elements = trades.reverse()
      for (let item of elements) {

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã
        if (this.findHistory(item.ID)) continue

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.history.unshift(item)

        const date = new Date(item.MTS)
        if (this.candles.length === 0 || this.candles[0].date.getMinutes() !== date.getMinutes()) {
          // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
          this.candles.unshift({
            date: date,
            timestamp: item.MTS,
            type: null,
            difference: 0,
            price: {},
            amount: 0,
            items: []
          })
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
        if (this.history.length > 100) {
          await this.watch({
            price: item.PRICE
          })
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â—É—é —Å–≤–µ—á–∏
        this.candles[0].items.unshift(item)

        // –†–∞—Å—á–µ—Ç –º–∏–Ω –∏ –º–∞–∫—Å
        this.candles[0].price.min = !this.candles[0].price.min
          ? item.PRICE
          : (item.PRICE < this.candles[0].price.min ? item.PRICE : this.candles[0].price.min)

        this.candles[0].price.max = !this.candles[0].price.max
          ? item.PRICE
          : (item.PRICE > this.candles[0].price.max ? item.PRICE : this.candles[0].price.max)

        // –û–±—ä–µ–º
        this.candles[0].amount += item.AMOUNT
      }
    })
  }

  // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–≤–µ—á–∞–º–∏, –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
  async observe () {
    // –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞
    if (this.task !== null) {
      return null
    }

    try {
      if (!this.candles.length || this.candles.length < 120) {
        this.console('observe: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á'.bgRed.white, this.candles.length)
        return false
      }

      try {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        await this.btce.activeOrders(config.pair)

        // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.console('observe: –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä')
        return false
      } catch (e) {
        // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        // —Ç–∞–∫ –∫–∞–∫, –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
      const data = this.candles.filter((item, index) => index <= 60)

      // –¢–µ–∫—É—â–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ
      const current = data.shift()

      // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
      const lastTrade = await this.lastTransaction()

      // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, —ç—Ç–æ –ø—Ä–æ–¥–∞–∂–∞
      if (lastTrade.type === 'buy' || this.task !== null) {
        return false
      }

      // –ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
      for (let item of data) {
        if (current.price.min > item.price.min) {
          // –ù–µ —Å–∞–º–∞—è –≤—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞, —Å–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–Ω–∞
          this.console(`observe: –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, {current: current.price.min , min: item.price.min})
          return false
        }
      }

      // –ö—É—Ä—Å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –∫—É–ø–∏–º btc
      const minPrice = parseFloat(((current.price.min * (0.05 / 100)) + current.price.min).toFixed(3))

      // –æ–±—ä–µ–º –∏—Å—Ö–æ–¥—è –∏–∑ –≤—Å–µ–π —Å—É–º–º—ã
      const amount = 0.000567; // await this.buyAmount(minPrice)

      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
      const markupPrice = this.getMarkupPrice(minPrice)

      let markupPriceMin = null
      let markupPriceMax = null
      let resolution = false

      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
      let markupData = this.candles.filter((item, index) => index <= 720)
      for (let item of markupData) {

        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤–∞–ª—é—Ç—ã –¥–æ—Å—Ç–∏–≥–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –º–∏–Ω—É—Ç markupPrice
        // —Ç–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∞—Ç—å –≤–∞–ª—é—Ç—É
        if (markupPrice <= item.price.max) {
          resolution = true
        }

        markupPriceMin = markupPriceMin === null
          ? item.price.min
          : (markupPriceMin < item.price.min ? markupPriceMin : item.price.min)

        markupPriceMax = markupPriceMax === null
          ? item.price.max
          : (markupPriceMax > item.price.max ? markupPriceMax : item.price.max)
      }

      if (resolution) {
        // –ü–æ–∫—É–ø–∞–µ–º
        try {
          this.console(`üëÅ –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ, –æ–±—ä–µ–º: ${amount}, —Ü–µ–Ω–∞: ${minPrice}`.yellow.underline)

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
          this.task = {
            type: 'buy',
            price: minPrice,
            minPrice: minPrice, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
            amount: amount,
            repeat: 30,
            bottom: 0 // –µ—Å–ª–∏ –¥–Ω–æ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 1, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á—Ç–æ —ç—Ç–æ –¥–Ω–æ –∏ –ø–æ–∫—É–ø–∞–µ–º
          }
        } catch (e) {
          this.console(`Buy error:`, e.error)
        }
      }
    } catch (e) {
      this.console(`Error observe: ${e.error}`)
    }
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –¥–Ω–∞
  async watch (transaction) {
    if (!transaction || !this.task) return false

    // –ü–æ–∫—É–ø–∫–∞
    const buy = async () => {
      // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–æ–ª–≥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–æ–∏—Ç –≤—ã—Å–æ–∫–æ–π, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
      if (!this.task.repeat) {
        this.console('–¢–∞–π–º-–∞—É—Ç –∑–∞–¥–∞—á–∏'.bgRed.white)
        this.task = null
        return false
      }
      
      const params = {
        '–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ': this.task.price,
        '—Ç–µ–∫—É—â–∏–π': transaction.price,
        '–º–∏–Ω–∏–º—É–º': this.task.minPrice
      }
      this.console('buy', params)

      // –ö—É—Ä—Å –ø–∞–¥–∞–µ—Ç, –∂–¥–µ–º –¥–Ω–∞
      if (transaction.price <= this.task.minPrice) {
        this.console('buy: –∫—É—Ä—Å –ø–∞–¥–∞–µ—Ç', params)
        this.task.minPrice = transaction.price
      } else {

        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã—Ä–æ—Å–ª–∞
        // –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –µ—â–µ –Ω–∏–∂–µ —á–∞—Å–æ–≤–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
        if (((1 - (this.task.minPrice / transaction.price)) * 1000) >= 2) {
          if (((1 - (this.task.minPrice / transaction.price)) * 1000) >= 4) {
            this.task.repeat--
            this.console(`buy: –≤—ã—Å–æ–∫–∏–π`.red, params)
            return false
          }
          this.console(`buy: –¥–Ω–æ`.gray, params)

          // –¶–µ–Ω–∞ –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
          if (transaction.price <= this.task.price) {
            this.console(`buy: —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ`.yellow, params)

            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
            if (this.task.bottom !== 1) {
              this.task.bottom++
              this.console('buy: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã...'.underline)
              return false
            }

            try {
              this.console(`buy: –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º ${this.task.amount} –ø–æ –∫—É—Ä—Å—É $${transaction.price}`.bgGreen.white, params)

              // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
              // const markupPrice = this.getMarkupPrice(transaction.price)
              // const amount = this.getCommission(this.task.amount)

              // –ü–æ–∫—É–ø–∞–µ–º –≤–∞–ª—é—Ç—É
              // this.task = {
              //   type: 'sell',
              //   price: markupPrice,
              //   minPrice: markupPrice, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
              //   maxPrice: markupPrice, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
              //   amount: this.task.amount,
              //   repeat: 30
              // }

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É
              // let buy = await btce.trade({
              //   pair: config.pair,
              //   type: 'buy',
              //   rate: transaction.price,
              //   amount: this.task.amount // —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–∏—Å–∏–∏
              // })

              // –û–ø–æ–≤–µ—â–∞–µ–º –æ–± –ø–æ–∫—É–ø–∫–µ
              // const consumption = (this.task.amount * transaction.price).toFixed(3)
              // const commission = this.getCommission(task.amount)

              // sendMessage(`
							// 	‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É ${this.task.amount} btc –ø–æ –∫—É—Ä—Å—É ${transaction.price}
							// 	—Ä–∞—Å—Ö–æ–¥: $${consumption}
							// 	–ø–æ–ª—É—á–∏–º: ${(this.task.amount - commission)} btc
							// 	–∫–æ–º–º–∏—Å–∏—è: $${(commission * transaction.price)} (${commission} btc)
							// 	–Ω–∞—Ü–µ–Ω–∫–∞: ${config.markup}%
							// 	–º–∏–Ω. —Ü–µ–Ω–∞: $${this.task.minPrice}
							// 	–º–∞–∫—Å. —Ü–µ–Ω–∞: $${this.task.price}
							// 	order: ` // ${buy.order_id}
              // )

            } catch (e) {
              this.console('Error watch buy:', e.error, this.task)
            }
          } else {
            // –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º...

            // –Ø –¥—É–º–∞—é –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, —Ç–æ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å...
            // –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –±—Ä–∞—Ç—å
            this.console(`–¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∏–Ω–∏–º—É–º–æ–º`, params)
          }
        } else {
          // –¶–µ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—Ä–æ—Å–ª–∞, –Ω–æ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –∂–¥–µ–º –¥–Ω–∞
          this.console(`–¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç, –Ω–æ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ`, params)
        }
      }
    }

    // –ü—Ä–æ–¥–∞–∂–∞
    const sell = async () => {
      const params = {
        '—Å—Ç–∞—Ä—Ç': this.task.price,
        '—Å–µ–π—á–∞—Å': transaction.price,
        '–º–∞–∫—Å–∏–º—É–º': !this.task.maxPrice ? this.task.maxPrice : this.task.price
      }

      // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
      if (transaction.price < this.task.price) {
        this.console(`sell: –∫—É—Ä—Å ${transaction.price} –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ ${this.task.price}`)
        return false
      }

      // –ö—É—Ä—Å —Ä–∞—Å—Ç–µ—Ç, –∂–¥–µ–º –ø–∏–∫–∞
      if (transaction.price > this.task.maxPrice) {
        this.task.maxPrice = transaction.price
        this.console('sell: –∫—É—Ä—Å —Ä–∞—Å—Ç–µ—Ç')
      } else {

        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–Ω–∏–∑–∏–ª–∞—Å—å
        // –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –µ—â–µ –≤—ã—à–µ —á–∞—Å–æ–≤–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
        if (((1 - (transaction.price / this.task.maxPrice)) * 1000) >= 3) {
          this.console(`sell: –º–∞–∫—Å–∏–º—É–º, –∫—É—Ä—Å —Å–Ω–∏–∂–∞–µ—Ç—Å—è`, params)

          // –¶–µ–Ω–∞ –≤—ã—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
          if (transaction.price >= this.task.price) {
            this.console(`sell: —Ü–µ–Ω–∞ –≤—ã—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞`, params)
            try {
              this.console(`sell: –ø—Ä–æ–¥–∞–µ–º ${this.task.amount} –ø–æ –∫—É—Ä—Å—É: ${transaction.price}`, params)

              // –û–±–Ω—É–ª—è–µ–º –∑–∞–¥–∞—á—É
              this.task = null

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
              // let sell = await btce.trade({
              //   pair: config.pair,
              //   type: 'sell',
              //   rate: transaction.price,
              //   amount: this.task.amount // —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–∏—Å–∏–∏
              // })
            } catch (e) {
              this.console('Error sell', e.error)
            }
          } else {
            // –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º...

            // –Ø –¥—É–º–∞—é –µ—Å–ª–∏ –æ–Ω–∞ —É–ø–∞–ª–∞ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–≤–∞—Ç—å...
            // –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–≤–∞—Ç—å
            this.console(`sell: —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Å—Ç–∞–æ–≤–ª–µ–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º [–Ω–∞—á–∞–ª–æ: ${this.task.price}, —Å–µ–π—á–∞—Å: ${transaction.price}, –º–∞–∫—Å–∏–º—É–º: ${this.task.maxPrice}]`)
          }
        } else {
          // –¶–µ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ —É–ø–∞–ª–∞, –Ω–æ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –∂–¥–µ–º –ø–∏–∫–∞
          this.console(`sell: —Ü–µ–Ω–∞ ${transaction.price} —É–ø–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–∏–∫–æ–º ${this.task.maxPrice}`, params)
        }
      }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏
    this.task.type === 'buy' ? buy() : sell()
  }
}

// init
const Bot = new TraderBot()
Bot.init()
const Base = require('../base')
const BtceService = require('btc-e-v3')
const Pusher = require('pusher-js')

class Wex extends Base {
  constructor(option) {
    super(option)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.btce = new BtceService({
      publicKey: this.config.api.wex.key,
      secretKey: this.config.api.wex.secret
    })

    this.socket = new Pusher('ee987526a24ba107824c', { cluster: 'eu' })
    this.channel = this.socket.subscribe(`${this.pair}.trades`)
  }

  init() {
    this.console(`run wex ${this.pair}`.green)

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    setTimeout(async () => {
      // –ü–µ—Ä–≤–∞—è –∑–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
      await this.firstLoadTrades()

      // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      this.trades()
    }, 1000)

    // –ó–∞–Ω–æ—Å–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã –≤ –º–∞—Å—Å–∏–≤
    setInterval(() => this.observeActiveOrders(), 1000)

    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—Ä–¥–µ—Ä–∞–º–∏
    setInterval(() => this.observeOrders(), 1000)

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ
    setInterval(() => this.observe(), 60000)
  }

  // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
  async lastTransaction() {
    try {
      // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
      const trandeHistory = await this.btce.tradeHistory({ from: 0, count: 1, pair: this.pair })
      let last = null
      for (let item in trandeHistory) {
        if (!last) {
          last = trandeHistory[item]
          last.id = item
        }
      }
      return last
    } catch (e) {
      return { type: 'sell' }
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –∏—Å—Ö–æ–¥—è –∏–∑ –∫—É—Ä—Å–∞ –∏ —Å—É–º–º—ã –¥–µ–Ω–µ–≥
  async buyAmount(rate) {
    try {
      const info = await this.btce.getInfo()
      const [, wallet] = this.pair.split('_')

      // –û–±—â–∏–π –æ–±—ä–µ–º –≤–∞–ª—é—Ç—ã
      const amount = info.funds[wallet]

      // –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const available = ((amount / 100) * this.percentWallet)

      return parseFloat((available / rate).toFixed(8))
    } catch (e) {
      console.log('Error buyAmount', e)
    }
  }

  // –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
  async sale(rate, amount) {
    try {
      // –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
      let price = this.getMarkupPrice(rate)

      // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
      let buy = await this.btce.trade({
        pair: this.pair,
        type: 'sell',
        rate: price,
        amount: parseFloat((amount - this.getCommission(amount)).toFixed(8))
      })
    } catch (e) {
      this.console('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏', e.error)
    }
  }

  // –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –ø–æ –∏—Å—Ç–∏—á–µ–Ω–∏—é 15 –º–∏–Ω—É—Ç
  async orderCancelLimit(id, order) {
    // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if (order.status === 1) return false

    const currentTime = Math.floor(Date.now() / 1000)

    // –ï—Å–ª–∏ —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ –ø—Ä–æ—à–µ–ª, –æ—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
    if (currentTime > (order.timestamp_created + this.config.timeOrder)) {
      try {
        // –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
        await this.btce.cancelOrder(id)

        // –°–æ–æ–±—â–∞–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        this.console(`${id} –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫`)

        return true
      } catch (e) {
        this.console(`Error orderCancelLimit: ${order.id}`)

        // –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        return false
      }
    }
    // –°—Ä–æ–∫ –æ—Ä–¥–µ—Ä–∞ –µ—â–µ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω
    return false
  }

  // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—Ä–¥–µ—Ä–∞–º–∏
  async observeOrders() {
    this.orders.map(async id => {
      try {
        const info = await this.btce.orderInfo(id)
        const order = info[id]

        // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        if (order.status === 2) {
          this.removeOrder(id)
          return false
        }

        // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Å—Ä–æ–∫ –ø—Ä–æ—à–µ–ª
        // –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∫—É–ø–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
        if (order.status === 3) {
          this.console('–û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω:', order)

          // –û–±—ä–µ–º, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∫—É–ø–∏–ª–∏
          const buyAmount = (order.start_amount - order.amount)

          // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫—É–ø–ª–µ
          this.sendMessage(`üí∞ –ß–∞—Å—Ç–∏—á–Ω–æ –∫—É–ø–∏–ª–∏ ${buyAmount} –∏–∑ ${order.start_amount} –ø–æ –∫—É—Ä—Å—É ${order.rate}\n order_id: ${id}`)

          // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
          const markupPrice = this.getMarkupPrice(order.rate)

          // –í—ã—Å—Ç–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∫—É–ø–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
          this.task = {
            type: 'sell',
            price: markupPrice,
            minPrice: markupPrice, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
            maxPrice: markupPrice, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
            amount: buyAmount
          }

          // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä
          this.removeOrder(id)

          return false
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
        if (order.type === 'buy' && await this.orderCancelLimit(id, order)) return false

        // –û–ø–æ–≤–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
        if (order.status !== 1) return false

        if (order.type === 'buy') {

          // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫—É–ø–ª–µ
          this.sendMessage(`üí∞ –ö—É–ø–∏–ª–∏ ${order.start_amount} –ø–æ –∫—É—Ä—Å—É ${order.rate}\n order_id: ${id}`)

          // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
          const markupPrice = this.getMarkupPrice(order.rate)

          // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
          this.task = {
            type: 'sell',
            price: markupPrice,
            minPrice: markupPrice, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
            maxPrice: markupPrice, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
            amount: order.start_amount
          }
        } else {
          // –û–ø–æ–≤–µ—â–∞–µ–º –æ –ø—Ä–æ–¥–∞–∂–µ
          this.sendMessage(`üéâ –ü—Ä–æ–¥–∞–ª–∏ ${order.start_amount} –ø–æ –∫—É—Ä—Å—É ${order.rate}\n–Ω–∞—Ü–µ–Ω–∫–∞: ${order.markup}%\norder: ${id}`)
        }

        // –£–¥–∞–ª—è–µ–º –æ—Ä–¥–µ—Ä –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        this.removeOrder(id)

      } catch (e) {
        this.console('Error observeOrders:', e.error)
      }
    })
  }

  // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏
  async observeActiveOrders() {
    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
      const activeOrders = await this.btce.activeOrders(this.pair)
      for (let id in activeOrders) {
        if (!this.orders.filter(item => item === id).length) {
          this.orders.push(id)
        }
      }
    } catch (e) {
      if (e.error !== 'no orders') {
        this.console('Error observeActiveOrders', e)
      }
    }
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  trades() {
    this.channel.bind('trades', async item => await this.addElementCandles(item[0]))
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫—É–ø–ª–∏/–ø—Ä–æ–¥–∞–∂–∏
  async firstLoadTrades() {
    try {
      const trades = await this.btce.trades(this.pair, 5000)
      for (let item of trades[this.pair].reverse()) {
        await this.addElementCandles([item.type, item.price, item.amount], item.timestamp * 1000, false)
      }
    } catch (e) {
      this.console('Error trades:', e.error)
    }
  }

  // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–≤–µ—á–∞–º–∏, –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
  async observe() {
    // –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞
    if (this.task !== null) {
      return null
    }

    try {
      if (!this.candles.length || this.candles.length < 120) {
        this.console('observe: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á'.bgRed.white, this.candles.length)
        return false
      }

      try {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        await this.btce.activeOrders(this.pair)

        // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.console('observe: –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä')
        return false
      } catch (e) {
        // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        // —Ç–∞–∫ –∫–∞–∫, –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
      const data = this.candles.filter((item, index) => index <= 60)

      // –¢–µ–∫—É—â–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ
      const current = data.shift()

      // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
      const lastTrade = await this.lastTransaction()
      
      // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, —ç—Ç–æ –ø—Ä–æ–¥–∞–∂–∞
      if (lastTrade.type === 'buy' || this.task !== null) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂–∏ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏
        const minSellPrice = this.getMarkupPrice(lastTrade.rate)

        // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –Ω–µ –æ—Ç–ª–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–∫—É–ø–∫—É
        this.task = {
          type: 'sell',
          price: minSellPrice,
          minPrice: minSellPrice, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
          maxPrice: minSellPrice, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
          amount: lastTrade.amount - this.getCommission(lastTrade.amount) // –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ —Å –≤—ã—á–µ—Ç–æ–º –∫–æ–º–º–∏—Å—Å–∏–∏
        }
        return false
      }

      // –ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
      for (let item of data) {
        if (current.price.min > item.price.min) {
          // –ù–µ —Å–∞–º–∞—è –≤—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞, —Å–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–Ω–∞
          this.console(`observe: –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏`, { current: current.price.min, min: item.price.min })
          return false
        }
      }

      // –ö—É—Ä—Å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –∫—É–ø–∏–º
      const minPrice = parseFloat(((current.price.min * (0.02 / 100)) + current.price.min).toFixed(3))

      // –æ–±—ä–µ–º –∏—Å—Ö–æ–¥—è –∏–∑ –≤—Å–µ–π —Å—É–º–º—ã
      const amount = await this.buyAmount(minPrice)

      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
      const markupPrice = this.getMarkupPrice(minPrice)

      let markupPriceMin = null
      let markupPriceMax = null
      let resolution = false

      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
      let markupData = this.candles.filter((item, index) => index <= 720)
      for (let item of markupData) {

        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤–∞–ª—é—Ç—ã –¥–æ—Å—Ç–∏–≥–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –º–∏–Ω—É—Ç markupPrice
        // —Ç–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∞—Ç—å –≤–∞–ª—é—Ç—É
        if (markupPrice <= item.price.max) {
          resolution = true
        }

        markupPriceMin = markupPriceMin === null
          ? item.price.min
          : (markupPriceMin < item.price.min ? markupPriceMin : item.price.min)

        markupPriceMax = markupPriceMax === null
          ? item.price.max
          : (markupPriceMax > item.price.max ? markupPriceMax : item.price.max)
      }

      if (resolution) {
        // –ü–æ–∫—É–ø–∞–µ–º
        try {
          this.console(`üëÅ –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ, –æ–±—ä–µ–º: ${amount}, —Ü–µ–Ω–∞: ${minPrice}`.yellow.underline)

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
          this.task = {
            type: 'buy',
            price: minPrice,
            minPrice: minPrice, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
            amount: amount,
            repeat: 30,
            bottom: 0 // –µ—Å–ª–∏ –¥–Ω–æ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 1, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á—Ç–æ —ç—Ç–æ –¥–Ω–æ –∏ –ø–æ–∫—É–ø–∞–µ–º
          }
        } catch (e) {
          this.console(`Buy error:`, e.error)
        }
      }
    } catch (e) {
      this.console(`Error observe: ${e.error}`, e)
    }
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –¥–Ω–∞
  async watch(transaction) {
    if (!transaction || !this.task) return false

    // –ü–æ–∫—É–ø–∫–∞
    const buy = async () => {
      // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–æ–ª–≥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–æ–∏—Ç –≤—ã—Å–æ–∫–æ–π, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
      if (!this.task.repeat) {
        this.console('–¢–∞–π–º-–∞—É—Ç –∑–∞–¥–∞—á–∏'.bgRed.white)
        this.task = null
        return false
      }

      const params = {
        '–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ': this.task.price,
        '—Ç–µ–∫—É—â–∏–π': transaction,
        '–º–∏–Ω–∏–º—É–º': this.task.minPrice
      }

      // –ö—É—Ä—Å –ø–∞–¥–∞–µ—Ç, –∂–¥–µ–º –¥–Ω–∞
      if (transaction <= this.task.minPrice) {
        this.console('buy: –∫—É—Ä—Å –ø–∞–¥–∞–µ—Ç', params)
        this.task.minPrice = transaction
      } else {

        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã—Ä–æ—Å–ª–∞
        // –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –µ—â–µ –Ω–∏–∂–µ —á–∞—Å–æ–≤–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
        if (((1 - (this.task.minPrice / transaction)) * 1000) >= 2) {
          if (((1 - (this.task.minPrice / transaction)) * 1000) >= 4) {
            this.task.repeat--
            this.console(`buy: –≤—ã—Å–æ–∫–∏–π`.red, params)
            return false
          }
          this.console(`buy: –¥–Ω–æ`.gray, params)

          // –¶–µ–Ω–∞ –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
          if (transaction <= this.task.price) {
            this.console(`buy: —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ`.yellow, params)

            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
            if (this.task.bottom !== 1) {
              this.task.bottom++
              this.console('buy: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã...'.underline)
              return false
            }

            try {
              this.console(`buy: –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º ${this.task.amount} –ø–æ –∫—É—Ä—Å—É $${transaction}`.bgGreen.white, params)

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É
              await this.btce.trade({
                pair: this.pair,
                type: 'buy',
                rate: transaction,
                amount: this.task.amount // —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–∏—Å–∏–∏
              })

              // –û–±–Ω—É–ª—è–µ–º –∑–∞–¥–∞—á—É
              this.task = null

            } catch (e) {
              this.console('Error watch buy:', e, this.task)
            }
          } else {
            // –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º...

            // –Ø –¥—É–º–∞—é –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, —Ç–æ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å...
            // –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –±—Ä–∞—Ç—å
            this.console(`–¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∏–Ω–∏–º—É–º–æ–º`, params)
          }
        } else {
          // –¶–µ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—Ä–æ—Å–ª–∞, –Ω–æ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –∂–¥–µ–º –¥–Ω–∞
          this.console(`–¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç, –Ω–æ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ`, params)
        }
      }
    }

    // –ü—Ä–æ–¥–∞–∂–∞
    const sell = async () => {
      const params = {
        '—Å—Ç–∞—Ä—Ç': this.task.price,
        '—Å–µ–π—á–∞—Å': transaction,
        '–º–∞–∫—Å–∏–º—É–º': !this.task.maxPrice ? this.task.maxPrice : this.task.price
      }

      // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
      if (transaction < this.task.price) {
        this.console(`sell: –∫—É—Ä—Å ${transaction} –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ ${this.task.price}`)
        return false
      }

      // –ö—É—Ä—Å —Ä–∞—Å—Ç–µ—Ç, –∂–¥–µ–º –ø–∏–∫–∞
      if (transaction > this.task.maxPrice) {
        this.task.maxPrice = transaction
        this.console('sell: –∫—É—Ä—Å —Ä–∞—Å—Ç–µ—Ç')
      } else {

        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–Ω–∏–∑–∏–ª–∞—Å—å
        // –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –µ—â–µ –≤—ã—à–µ —á–∞—Å–æ–≤–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
        if (((1 - (transaction / this.task.maxPrice)) * 1000) >= 3) {
          this.console(`sell: –º–∞–∫—Å–∏–º—É–º, –∫—É—Ä—Å —Å–Ω–∏–∂–∞–µ—Ç—Å—è`, params)

          // –¶–µ–Ω–∞ –≤—ã—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
          if (transaction >= this.task.price) {
            this.console(`sell: —Ü–µ–Ω–∞ –≤—ã—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞`, params)
            try {
              this.console(`sell: –ø—Ä–æ–¥–∞–µ–º ${this.task.amount} –ø–æ –∫—É—Ä—Å—É: ${transaction}`, params) 

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
              await this.btce.trade({
                pair: this.pair,
                type: 'sell',
                rate: transaction,
                amount: this.task.amount // —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–∏—Å–∏–∏
              })

              // –û–±–Ω—É–ª—è–µ–º –∑–∞–¥–∞—á—É
              this.task = null

            } catch (e) {
              this.console('Error sell', e)
            }
          } else {
            // –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º...

            // –Ø –¥—É–º–∞—é –µ—Å–ª–∏ –æ–Ω–∞ —É–ø–∞–ª–∞ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–≤–∞—Ç—å...
            // –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–≤–∞—Ç—å
            this.console(`sell: —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Å—Ç–∞–æ–≤–ª–µ–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º [–Ω–∞—á–∞–ª–æ: ${this.task.price}, —Å–µ–π—á–∞—Å: ${transaction}, –º–∞–∫—Å–∏–º—É–º: ${this.task.maxPrice}]`)
          }
        } else {
          // –¶–µ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ —É–ø–∞–ª–∞, –Ω–æ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –∂–¥–µ–º –ø–∏–∫–∞
          this.console(`sell: —Ü–µ–Ω–∞ ${transaction} —É–ø–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–∏–∫–æ–º ${this.task.maxPrice}`, params)
        }
      }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏
    this.task.type === 'buy' ? buy() : sell()
  }
}

module.exports = Wex

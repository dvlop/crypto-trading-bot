const config = require('./config')
const BtceService = require('btc-e-v3')
const sendMessage = require('./telegram')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const btce = new BtceService({ publicKey: config.key, secretKey: config.secret })

// –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
const history = []

// –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã
const orders = []

// –°–≤–µ—á–∏
const candles = []

// –ó–∞–¥–∞—á–∞
let task = null

// –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
const findHistory = (tid) => {
  for (item of history) {
    if (tid === item.tid) return true
  }
  return false
}

// –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
const lastTransaction = async () => {
  try {
    // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    let trandeHistory = await btce.tradeHistory({ from: 0, count: 1 })
    let last = null
    for (let item in trandeHistory){
      if (!last) {
        last = trandeHistory[item]
        last.id = item
      }
    }
    return last
  } catch (e) {
    //console.log(`Error lastTrade: ${e}`)
    return {type: 'sell'}
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
const removeOrder = (id) => {
  for (let key in orders){
    if (orders[key] === id) {
      orders.splice(key, 1)
    }
  }
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
const getMarkupPrice = (rate) => parseFloat(((rate * ((config.markup + config.commission) / 100)) + rate).toFixed(3))

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Å–∏—é
const getCommission = (amount) => parseFloat((amount - (amount * (1 - (config.commission / 100)))).toFixed(8))

// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –∏—Å—Ö–æ–¥—è –∏–∑ –∫—É—Ä—Å–∞ –∏ —Å—É–º–º—ã –¥–µ–Ω–µ–≥
const buyAmount = async (rate) => {
  const info = await btce.getInfo()
  const usd = info.funds.usd
  return parseFloat((50 / rate).toFixed(8))
}

// –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
const sale = async (rate, amount) => {
  try {
    // –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
    let price = getMarkupPrice(rate)

    // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    let buy = await btce.trade({
      pair: config.pair,
      type: 'sell',
      rate: price,
      amount: parseFloat((amount - getCommission(amount)).toFixed(8))
    })

    // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    sendMessage(`üí∞ –í—ã—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ${amount} btc –ø–æ –∫—É—Ä—Å—É ${price}\n order: ${buy.order_id}`)

  } catch (e) {
    console.log(`Error Buy: ${e}`)
    console.log(e)

    sendMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: ${e.error}`)
  }
}

// –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
const consoleTime = (text, params = '') => {
  const date = new Date()
  const hours = date.getHours()
  const minutes = date.getMinutes()
  console.log(`${hours < 10 ? '0' + hours : hours}:${minutes < 10 ? '0' + minutes : minutes} ‚Äî ${text}`, params)
}

// –û–∂–∏–¥–∞–Ω–∏–µ –¥–Ω–∞
const watch = async (transaction) => {
  if (!transaction || !task) return false

  // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–æ–ª–≥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–æ–∏—Ç –≤—ã—Å–æ–∫–æ–π, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
  if (!task.repeat) {
    consoleTime('–ó–∞–¥–∞—á–∞ —Å–±—Ä–æ—â–µ–Ω–∞, —Ü–µ–Ω–∞ –ø–æ–≤—ã—Å–∏–ª–∞—Å—å')
    sendMessage(`–ó–∞–¥–∞—á–∞ —Å–±—Ä–æ—â–µ–Ω–∞, —Ü–µ–Ω–∞ –ø–æ–≤—ã—Å–∏–ª–∞—Å—å`)
    task = null
    return false
  }

  // –ü–æ–∫—É–ø–∫–∞
  const buy = async () => {
    const params = {
      '—Å—Ç–∞—Ä—Ç': task.price,
      '—Å–µ–π—á–∞—Å': transaction.price,
      '–º–∏–Ω–∏–º—É–º': task.minPrice
    }

    // –ö—É—Ä—Å –ø–∞–¥–∞–µ—Ç, –∂–¥–µ–º –¥–Ω–∞
    if (transaction.price < task.minPrice) {
      task.minPrice = transaction.price
    } else {

      // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã—Ä–æ—Å–ª–∞
      // –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –µ—â–µ –Ω–∏–∂–µ —á–∞—Å–æ–≤–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
      if (((1 - (task.minPrice / transaction.price)) * 1000) >= 3) {
        if (((1 - (task.minPrice / transaction.price)) * 1000) >= 4) {
          task.repeat--
          consoleTime(`–í—ã—Å–æ–∫–∏–π`, params)
          return false
        }
        consoleTime(`–î–Ω–æ`, params)

        // –¶–µ–Ω–∞ –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
        if (transaction.price <= task.price) {
          consoleTime(`–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ`, params)

          // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
          if (task.bottom !== 1) {
            task.bottom++
            consoleTime('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã...')
            return false
          }

          try {
            consoleTime(`–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º ${task.amount}`, params)

            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            let markupPrice = getMarkupPrice(transaction.price)
            let amount = getCommission(task.amount)
            console.log(amount)

            // –ü–æ–∫—É–ø–∞–µ–º –≤–∞–ª—é—Ç—É
            task = {
              type: 'sell',
              price: markupPrice,
              minPrice: markupPrice, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
              maxPrice: markupPrice, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
              amount: task.amount,
              repeat: 30
            }

            sendMessage(`‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É ${task.amount} btc –ø–æ –∫—É—Ä—Å—É ${transaction.price}`)
            /*****************
            // let buy = await btce.trade({
            //   pair: config.pair,
            //   type: 'buy',
            //   rate: transaction.price,
            //   amount: task.amount // —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–∏—Å–∏–∏
            // })

            // –û–ø–æ–≤–µ—â–∞–µ–º –æ–± –ø–æ–∫—É–ø–∫–µ
            let consumption = (task.amount * transaction.price).toFixed(3)
            let commission = getCommission(task.amount)

            sendMessage(`
‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É ${task.amount} btc –ø–æ –∫—É—Ä—Å—É ${transaction.price}
—Ä–∞—Å—Ö–æ–¥: $${consumption}
–ø–æ–ª—É—á–∏–º: ${(task.amount - commission)} btc
–∫–æ–º–º–∏—Å–∏—è: $${(commission * transaction.price)} (${commission} btc)
–Ω–∞—Ü–µ–Ω–∫–∞: ${config.markup}%
–º–∏–Ω. —Ü–µ–Ω–∞: $${task.minPrice}
–º–∞–∫—Å. —Ü–µ–Ω–∞: $${task.price}
order: ${buy.order_id}`)
            */
          } catch (e) {
            console.log('Error watch buy:')
            console.log(task)
            console.log(e)
          }
        } else {
          // –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º...

          // –Ø –¥—É–º–∞—é –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, —Ç–æ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å...
          // –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –±—Ä–∞—Ç—å
          consoleTime(`–¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∏–Ω–∏–º—É–º–æ–º`, params)
        }
      } else {
        // –¶–µ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—Ä–æ—Å–ª–∞, –Ω–æ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –∂–¥–µ–º –¥–Ω–∞
        consoleTime(`–¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç, –Ω–æ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ`, params)
      }
    }
  }

  // –ü—Ä–æ–¥–∞–∂–∞
  const sell = async () => {
    const params = {
      '—Å—Ç–∞—Ä—Ç': task.price,
      '—Å–µ–π—á–∞—Å': transaction.price,
      '–º–∞–∫—Å–∏–º—É–º': !task.maxPrice ? task.maxPrice : task.price
    }

    // –ö—É—Ä—Å —Ä–∞—Å—Ç–µ—Ç, –∂–¥–µ–º –ø–∏–∫–∞
    if (transaction.price > task.maxPrice) {
      task.maxPrice = transaction.price
    } else {

      // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–Ω–∏–∑–∏–ª–∞—Å—å
      // –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –µ—â–µ –≤—ã—à–µ —á–∞—Å–æ–≤–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
      if (((1 - (transaction.price / task.maxPrice)) * 1000) >= 3) {
        if (((1 - (transaction.price / task.maxPrice)) * 1000) >= 4) {
          task.repeat--
          consoleTime(`–£–ø–∞–ª`, params)
          return false
        }

        consoleTime(`–ú–∞–∫—Å–∏–º—É–º, –∫—É—Ä—Å —Å–Ω–∏–∂–∞–µ—Ç—Å—è`, params)

        // –¶–µ–Ω–∞ –≤—ã—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
        if (transaction.price >= task.price) {
          consoleTime(`–¶–µ–Ω–∞ –≤—ã—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞`, params)
          try {
            consoleTime(`–ü—Ä–æ–¥–∞–µ–º ${task.amount} –ø–æ –∫—É—Ä—Å—É: ${transaction.price}`, params)
            task = null
            // –ü—Ä–æ–¥–∞–µ–º –≤–∞–ª—é—Ç—É
            sendMessage(`‚åõ –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥—É–∂—É –Ω–∞ –ø–æ–∫—É–ø–∫—É ${task.amount} btc –ø–æ –∫—É—Ä—Å—É ${transaction.price}`)

          } catch (e) {
            console.log('Error sell')
            console.log(e)
          }
        } else {
          // –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º...

          // –Ø –¥—É–º–∞—é –µ—Å–ª–∏ –æ–Ω–∞ —É–ø–∞–ª–∞ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–≤–∞—Ç—å...
          // –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–≤–∞—Ç—å
          consoleTime(`–¶–µ–Ω–∞ —É–ø–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Å—Ç–∞–æ–≤–ª–µ–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º [–Ω–∞—á–∞–ª–æ: ${task.price}, —Å–µ–π—á–∞—Å: ${transaction.price}, –º–∞–∫—Å–∏–º—É–º: ${task.maxPrice}]`)
        }
      } else {
        // –¶–µ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ —É–ø–∞–ª–∞, –Ω–æ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –∂–¥–µ–º –ø–∏–∫–∞
        consoleTime(`–¶–µ–Ω–∞ ${transaction.price} —É–ø–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–∏–∫–æ–º ${task.maxPrice}`, params)
      }
    }
  }

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏
  task.type === 'buy' ? buy() : sell()
}

// –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –ø–æ –∏—Å—Ç–∏—á–µ–Ω–∏—é 15 –º–∏–Ω—É—Ç
const orderCancelLimit = async (id, order) => {
  // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–º –ø—Ä–æ–≤–µ—Ä–∫—É
  if (order.status === 1) return false

  let currentTime = Math.floor(Date.now() / 1000)

  // –ï—Å–ª–∏ —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ –ø—Ä–æ—à–µ–ª, –æ—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
  if (currentTime > (order.timestamp_created + config.timeOrder)) {
    try {
      // –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
      await btce.cancelOrder(id)

      // –°–æ–æ–±—â–∞–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
      console.log(`${id} –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫`)
      return true
    } catch (e) {
      console.log(`Error orderCancelLimit: ${order.id}`)
      console.log(e)

      // –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
      return false
    }
  }
  // –°—Ä–æ–∫ –æ—Ä–¥–µ—Ä–∞ –µ—â–µ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω
  return false
}

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—Ä–¥–µ—Ä–∞–º–∏
const observeOrders = async () => {
  orders.map(async id => {
    try {
      const info = await btce.orderInfo(id)
      const order = info[id]

      // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
      if (order.status === 2) {
        removeOrder(id)
        return false
      }

      // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Å—Ä–æ–∫ –ø—Ä–æ—à–µ–ª
      // –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∫—É–ø–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
      if (order.status === 3) {
        console.log('...........................')
        console.log('–û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω:')
        console.log(order)
        console.log('...........................')
        // –û–±—ä–µ–º, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∫—É–ø–∏–ª–∏
        let buyAmount = (order.start_amount - order.amount)

        // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫—É–ø–ª–µ
        sendMessage(`üí∞ –ß–∞—Å—Ç–∏—á–Ω–æ –∫—É–ø–∏–ª–∏ ${buyAmount} btc –∏–∑ ${order.start_amount} btc –ø–æ –∫—É—Ä—Å—É ${order.rate}\n order_id: ${id}`)

        // –æ—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
        task = null

        // –í—ã—Å—Ç–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∫—É–ø–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        await sale(order.rate, buyAmount)

        // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä
        removeOrder(id)

        return false
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
      if (order.type === 'buy' && await orderCancelLimit(id, order)) return false

      // –û–ø–æ–≤–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
      if (order.status !== 1) return false

      if (order.type === 'buy') {

        // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫—É–ø–ª–µ
        sendMessage(`üí∞ –ö—É–ø–∏–ª–∏ ${order.start_amount} BTC –ø–æ –∫—É—Ä—Å—É ${order.rate}\n order_id: ${id}`)

        // –æ—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
        task = null

        // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        await sale(parseFloat(order.rate.toFixed(3)), parseFloat(order.start_amount.toFixed(8)))

      } else {

        // –û–ø–æ–≤–µ—â–∞–µ–º –æ –ø—Ä–æ–¥–∞–∂–µ
        sendMessage(`üéâ –ü—Ä–æ–¥–∞–ª–∏ ${config.amount} BTC –ø–æ –∫—É—Ä—Å—É ${order.rate}\n–Ω–∞—Ü–µ–Ω–∫–∞: ${order.markup}%\norder: ${id}`)
      }

      // –£–¥–∞–ª—è–µ–º –æ—Ä–¥–µ—Ä –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
      removeOrder(id)

    } catch (e) {
      console.log('Error observeOrders:')
      console.log(e)
    }
  })
}

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏
const observeActiveOrders = async () => {
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    let activeOrders = await btce.activeOrders(config.pair)
    for (let id in activeOrders) {
      if (!orders.filter(item => item === id).length) {
        orders.push(id)
      }
    }
  } catch (e) {
    if (e.error !== 'no orders') {
      console.log('Error observeActiveOrders:')
      console.log(e)
    }
  }
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫—É–ø–ª–∏/–ø—Ä–æ–¥–∞–∂–∏
const trades = async () => {
  try {
    let trades = await btce.trades(config.pair, (!history.length ? 5000 : 150))
    for (let item of trades[config.pair].reverse()){

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã
      if (findHistory(item.tid)) continue

      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      history.unshift(item)

      let date = new Date(item.timestamp * 1000)
      if (candles.length === 0 || candles[0].date.getMinutes() !== date.getMinutes()) {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
        candles.unshift({
          date: date,
          timestamp: item.timestamp,
          type: null,
          difference: 0,
          price: {},
          amount: 0,
          items: []
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
      if (history.length > 5000) {
        await watch(item)
      }

      // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â—É—é —Å–≤–µ—á–∏
      candles[0].items.unshift(item)

      // –†–∞—Å—á–µ—Ç –º–∏–Ω –∏ –º–∞–∫—Å
      candles[0].price.min = !candles[0].price.min
        ? item.price
        : (item.price < candles[0].price.min ? item.price : candles[0].price.min)

      candles[0].price.max = !candles[0].price.max
        ? item.price
        : (item.price > candles[0].price.max ? item.price : candles[0].price.max)

      // –û–±—ä–µ–º
      candles[0].amount += item.amount
    }
  } catch (e) {
    console.log(`Error trades: ${e}`)
  }
}

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–≤–µ—á–∞–º–∏, –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
const observe = async () => {
  try {
    if (!candles.length || candles.length < 120) {
      return false
    }

    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
      await btce.activeOrders(config.pair)

      // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      return false
    } catch (e) {
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
      // —Ç–∞–∫ –∫–∞–∫, –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
    let data = candles.filter((item, index) => index <= 60)

    // –¢–µ–∫—É—â–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ
    let current = data.shift()

    // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    let lastTrade = await lastTransaction()

    // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, —ç—Ç–æ –ø—Ä–æ–¥–∞–∂–∞
    if (lastTrade.type === 'buy' || task !== null) {
      return false
    }

    // –ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
    for (let item of data){
      if (current.price.min > item.price.min) {
        // –ù–µ —Å–∞–º–∞—è –≤—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞, —Å–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–Ω–∞
        return false
      }
    }

    // –ö—É—Ä—Å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –∫—É–ø–∏–º btc
    const minPrice = parseFloat(((current.price.min * (0.05 / 100)) + current.price.min).toFixed(3))

    // –æ–±—ä–µ–º –∏—Å—Ö–æ–¥—è –∏–∑ –≤—Å–µ–π —Å—É–º–º—ã
    const amount = await buyAmount(minPrice)

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
    const markupPrice = getMarkupPrice(minPrice)

    let markupPriceMin = null
    let markupPriceMax = null

    let resolution = false

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
    let markupData = candles.filter((item, index) => index <= 720)
    for (let item of markupData) {

      // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤–∞–ª—é—Ç—ã –¥–æ—Å—Ç–∏–≥–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –º–∏–Ω—É—Ç markupPrice
      // —Ç–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∞—Ç—å –≤–∞–ª—é—Ç—É
      if (markupPrice <= item.price.max) {
        resolution = true
      }

      markupPriceMin = markupPriceMin === null
        ? item.price.min
        : (markupPriceMin < item.price.min ? markupPriceMin : item.price.min)

      markupPriceMax = markupPriceMax === null
        ? item.price.max
        : (markupPriceMax > item.price.max ? markupPriceMax : item.price.max)
    }

    if (resolution) {
      // –ü–æ–∫—É–ø–∞–µ–º
      try {

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        task = {
          type: 'buy',
          price: minPrice,
          minPrice: minPrice, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
          amount: amount,
          repeat: 30,
          bottom: 0 // –µ—Å–ª–∏ –¥–Ω–æ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 1, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á—Ç–æ —ç—Ç–æ –¥–Ω–æ –∏ –ø–æ–∫—É–ø–∞–µ–º
        }

        // –û–ø–æ–≤–µ—â–∞–µ–º –æ–± —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
        sendMessage(`üëÅ –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ \n –æ–±—ä–µ–º: ${amount} \n –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${minPrice}`)

      } catch (e) {
        console.log(`Buy error:`, e)
        sendMessage(`–û—à–∏–±–∫–∞ buy: ${e}`)
      }
    }
  } catch (e) {
    console.log(`Error observe: ${e}`)
  }
}

/** –°—Ç–∞—Ä—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏—è */
consoleTime('–°—Ç–∞—Ä—Ç –±–æ—Ç–∞')
// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
setTimeout(async () => {
  // –ü–µ—Ä–≤–∞—è –∑–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
  await trades()

  // –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
  setInterval(trades, 1000)
}, 1000)

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—Ä–¥–µ—Ä–∞–º–∏
setInterval(observeActiveOrders, 1000)

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—Ä–¥–µ—Ä–∞–º–∏
setInterval(observeOrders, 5000)

// –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ
setInterval(observe, 60000)

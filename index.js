const config = require('./config')
const BtceService = require('btc-e-v3')
const TelegramBot = require('node-telegram-bot-api')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const btce = new BtceService({ publicKey: config.key, secretKey: config.secret })

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.token, {polling: true})

// –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
const history = []

// –°–≤–µ—á–∏
const candles = []

// –°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–∏
const orders = []

// –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
const findHistory = (tid) => {
  for (item of history) {
    if (tid === item.tid) return true
  }
  return false
}

// –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
const lastTransaction = async () => {
  try {
    // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    let trandeHistory = await btce.tradeHistory({ from: 0, count: 1 })
    let last = null
    for (let item in trandeHistory){
      if (!last) {
        last = trandeHistory[item]
        last.id = item
      }
    }
    return last
  } catch (e) {
    console.log(`Error lastTrade: ${e}`)
  }
}

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—Ä–¥–µ—Ä–∞–º–∏
const observeOrders = () => {
  orders.map(async order => {
    try {
      let res = await btce.orderInfo(order.id)
      let info = res[order.id]

      // –û–ø–æ–≤–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
      if (info.status !== 1) return false

      if (info.type === 'buy') {

        // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫—É–ø–ª–µ
        bot.sendMessage(config.user, `üí∞ –ö—É–ø–∏–ª–∏ ${info.start_amount} BTC –ø–æ –∫—É—Ä—Å—É ${info.rate}, order_id: ${order.id}`)

        try {
          // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ...
          let buy = await btce.trade({
            pair: config.pair,
            type: 'sell',
            rate: order.sell,
            amount: config.amount
          })

          // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –æ—Ä–¥–µ—Ä–æ–º
          orders.push({
            id: buy.order_id,
            price: order.price, // —Å—É–º–º–∞ –∑–∞–∫—É–ø–∫–∏
            sell: order.sell,
            markup: config.markup
          })

          // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
          bot.sendMessage(config.user, `üí∞ –í—ã—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ${info.start_amount} BTC –ø–æ –∫—É—Ä—Å—É ${order.sell}, order_id: ${buy.order_id}`)

        } catch (e) {
          console.log(`Error observeOrders Buy: ${e}`)
          bot.sendMessage(config.user, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: ${e.error}`)
        }
      } else {

        // –û–ø–æ–≤–µ—â–∞–µ–º –æ –ø—Ä–æ–¥–∞–∂–µ
        bot.sendMessage(config.user, `
üéâ –ü—Ä–æ–¥–∞–ª–∏ ${info.start_amount} BTC –ø–æ –∫—É—Ä—Å—É ${info.rate}
–æ–±—ä–µ–º: ${info.start_amount} BTC
–∫—É–ø–∏–ª–∏: $${order.price}
–ø—Ä–æ–¥–∞–ª–∏: $${order.sell} (${info.rate} –ø–æ –¥–∞–Ω–Ω—ã–º btc-e —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–∏—Å–∏–∏)
—Ä–∞—Å—Ö–æ–¥: $${(order.amount * order.price).toFixed(3)}
–Ω–∞—Ü–µ–Ω–∫–∞: ${order.markup}%
–∑–∞—Ä–∞–±–æ—Ç–æ–∫: $${order.sell - order.price}
–∑–∞—Ä–∞–±–æ—Ç–∞–µ–º: $${((config.amount * order.sell) * (config.markup / 100))}
–∫–æ–º–º–∏—Å–∏—è: $${((config.amount * order.sell) - (order.price + ((config.amount * order.sell) * (config.markup / 100))))}
order_id: ${order.id}`)
      }

      // –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π order –∏–∑ orders
      for (let key in orders){
        if (orders[key].id === order.id) {
          orders.splice(key, 1)
        }
      }
    } catch (e) {
      console.log(`Error observeOrders:`)
      console.log(e)
    }
  })
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫—É–ø–ª–∏/–ø—Ä–æ–¥–∞–∂–∏
const trades = async () => {
  try {
    let trades = await btce.trades(config.pair, (!history.length ? 1000 : 150))
    for (let item of trades[config.pair].reverse()){

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã
      if (findHistory(item.tid)) continue

      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      history.unshift(item)

      let date = new Date(item.timestamp * 1000)
      if (candles.length === 0 || candles[0].date.getMinutes() !== date.getMinutes()) {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
        candles.unshift({
          date: date,
          timestamp: item.timestamp,
          type: null,
          difference: 0,
          price: {},
          amount: 0,
          items: []
        })
      }

      // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â—É—é —Å–≤–µ—á–∏
      candles[0].items.unshift(item)

      // –†–∞—Å—á–µ—Ç –º–∏–Ω –∏ –º–∞–∫—Å
      candles[0].price.min = !candles[0].price.min
        ? item.price
        : (item.price < candles[0].price.min ? item.price : candles[0].price.min)

      candles[0].price.max = !candles[0].price.max
        ? item.price
        : (item.price > candles[0].price.max ? item.price : candles[0].price.max)

      // –û–±—ä–µ–º
      candles[0].amount += item.amount
    }
  } catch (e) {
    console.log(`Error trades: ${e}`)
  }
}

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–≤–µ—á–∞–º–∏, –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
const observe = async () => {
  try {
    if (!candles.length || candles.length < 240) {
      return false
    }

    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
      await btce.activeOrders(config.pair)

      // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      return false
    } catch (e) {
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
      // —Ç–∞–∫ –∫–∞–∫, –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
    let data = candles.filter((item, index) => index <= 60)

    // –¢–µ–∫—É—â–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ
    let current = data.shift()

    // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    let lastTrade = await lastTransaction()

    // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, —ç—Ç–æ –ø—Ä–æ–¥–∞–∂–∞
    if (lastTrade.type === 'buy') {
      return false
    }

    // –ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
    for (let item of data){
      if (current.price.min > item.price.min) {
        // –ù–µ —Å–∞–º–∞—è –≤—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞, —Å–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–Ω–∞
        return false
      }
    }

    // –û–±—ä–µ–º —Å –∫–æ–º–º–∏—Å–∏–µ–π –Ω–µ –±–æ–ª–µ–µ 8 –Ω—É–ª–µ–π
    let amount = (config.amount / (1 - (config.commission / 100))).toFixed(8)

    // –ê —Ç–∞–∫ –∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–∞–ª—å–Ω–æ –ª–∏ –ø—Ä–æ–¥–∞—Ç—å —Å –Ω–∞–∫–∏–¥–∫–æ–π
    let markupPrice = (current.price.min * ((config.markup + (config.commission * 2)) / 100)) + current.price.min
    let markupPriceMin = null
    let markupPriceMax = null

    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Å–æ—Ç—ã—Ö
    markupPrice = markupPrice.toFixed(3)

    let resolution = false

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
    let markupData = candles.filter((item, index) => index <= 720)
    for (let item of markupData) {

      // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤–∞–ª—é—Ç—ã –¥–æ—Å—Ç–∏–≥–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –º–∏–Ω—É—Ç markupPrice
      // —Ç–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∞—Ç—å –≤–∞–ª—é—Ç—É
      if (markupPrice <= item.price.max) {
        resolution = true
      }

      markupPriceMin = markupPriceMin === null
        ? item.price.min
        : (markupPriceMin < item.price.min ? markupPriceMin : item.price.min)

      markupPriceMax = markupPriceMax === null
        ? item.price.max
        : (markupPriceMax > item.price.max ? markupPriceMax : item.price.max)
    }

    if (resolution) {
      // –ü–æ–∫—É–ø–∞–µ–º
      try {
        let buy = await btce.trade({
          pair: config.pair,
          type: 'buy',
          rate: current.price.min,
          amount: amount // —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–∏—Å–∏–∏
        })

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –æ—Ä–¥–µ—Ä–æ–º
        orders.push({
          id: buy.order_id,
          price: current.price.min,
          sell: markupPrice,
          markup: config.markup,
          amount: amount
        })

        // –û–ø–æ–≤–µ—â–∞–µ–º –æ–± –ø–æ–∫—É–ø–∫–µ
        bot.sendMessage(config.user, `
‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É (${buy.order_id}) ${amount} BTC –ø–æ –∫—É—Ä—Å—É ${current.price.min} \n\r
—Ä–∞—Å—Ö–æ–¥: $${(amount * current.price.min).toFixed(3)}
–ø–æ–ª—É—á–∏–º: ${config.amount} BTC
–∑–∞—Ä–∞–±–æ—Ç–∞–µ–º: $${((config.amount * markupPrice) * (config.markup / 100))}
–∫–æ–º–º–∏—Å–∏—è: $${((config.amount * markupPrice) - (current.price.min + ((config.amount * markupPrice) * (config.markup / 100))))}
–∫–æ–º–º–∏—Å–∏—è –∑–∞ –ø–æ–∫—É–ø–∫—É BTC: ${(amount - config.amount).toFixed(6)} BTC
–º–∏–Ω. —Ü–µ–Ω–∞: ${markupPriceMin}
–º–∞–∫—Å. —Ü–µ–Ω–∞: ${markupPriceMax}
—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${markupPrice}`)

      } catch (e) {
        console.log(`Buy error:`)
        console.log(e)
        bot.sendMessage(config.user, `–û—à–∏–±–∫–∞ buy: ${e}`)
      }
    }
  } catch (e) {
    console.log(`Error observe: ${e}`)
  }
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
setInterval(trades, 1000)

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—Ä–¥–µ—Ä–∞–º–∏
setInterval(observeOrders, 4000)

// –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ
setInterval(observe, 60000)

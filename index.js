const config = require('./config')
const db = require('./db')
const BTCE = require('btce')
const TelegramBot = require('node-telegram-bot-api')

// MongoDB –º–æ–¥–µ–ª–∏
const models = require('./model')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const btce = new BTCE(config.key, config.secret)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.token, {polling: true})

// –í–∞–ª—é—Ç–∞
const pair = 'btc_usd'

// –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
const history = []

// –°–≤–µ—á–∏
const candles = []

let segment = null

// –ö–æ—à–µ–ª—å–∫–∏
let wallet = null

// –û–±—ä–µ–º –ø—Ä–µ–æ–±—Ä–∏—Ç–∞–µ–º—ã—Ö btc
const amount = 0.001

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
let elements = 500

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–æ–≤
btce.getInfo((err, res) => {
  if (err) throw new Error(err)

  // –ö–æ—à–µ–ª–µ–∫
  wallet = res.return.funds

  btce.ticker({pair: pair}, (err, res) => {
    if (err) throw new Error(err)
    const ticker = res.ticker

    setInterval(() => trades(), 1000)
  })
})

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫—É–ø–ª–∏/–ø—Ä–æ–¥–∞–∂–∏
const trades = () => {
  btce.trades({count: elements, pair: pair}, (err, res) => {
    if (err) throw new Error(err)
    for (let item of res.reverse()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã
      if (findHistory(item.tid)) continue

      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      history.unshift(item)

      let date = new Date(item.date * 1000)
      if (segment === null || segment !== date.getMinutes()) {
        segment = date.getMinutes()

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
        candles.unshift({
          date: date,
          timestamp: item.date,
          type: null,
          difference: 0,
          price: {},
          amount: 0,
          items: []
        })
      }

      // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â—É—é —Å–≤–µ—á–∏
      candles[0].items.unshift(item)

      // –†–∞—Å—á–µ—Ç –º–∏–Ω –∏ –º–∞–∫—Å
      candles[0].price.min = !candles[0].price.min
        ? item.price
        : (item.price < candles[0].price.min ? item.price : candles[0].price.min)

      candles[0].price.max = !candles[0].price.max
        ? item.price
        : (item.price > candles[0].price.max ? item.price : candles[0].price.max)

      // –û–±—ä–µ–º
      candles[0].amount += item.amount
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 75 –∫–æ–ª. –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    elements = 100
  })
}

const findHistory = (tid) => {
  for (item of history) {
    if (tid === item.tid) return true
  }
  return false
}

// –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã
const activeOrders = () => new Promise((resolve, reject) => {
  btce.activeOrders({pair: pair}, (err, res) => {
    resolve(res)
  })
})

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –æ—Ä–¥–µ—Ä–µ
const getActiveOrders = () => new Promise(async (resolve, reject) => {
  let order = await models.Order.findOne({status: false})
  if (order === null) {
    reject('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤')
    return false
  }

  btce.orderInfo({order_id: order.id}, (err, res) => {
    if (err) {
      reject(err)
      return false
    }
    resolve(res)
  })
})

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—Ä–¥–µ—Ä–∞–º–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–∫—É–ø–∫–∏ (buy/sell)
const observeActiveOrders = async () => {
  try {
    let order = await getActiveOrders()

    // –û—Ä–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
    if (order.return.status === 1){

      // –û—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
      models.Order.update({
        id: order.id
      }, {
        $set: true
      })

      // –°–æ–æ–±—â–∞–µ–º –±–æ—Ç—É, —á—Ç–æ –ø–æ—Ä–∞ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É

    }
  } catch (e) {
    console.log(e)
  }
}

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–≤–µ—á–∞–º–∏, –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏
const observe = async () => {
  try {
    if (!candles.length) return false

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    try {
      let order = await getActiveOrders()
      console.log('–µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
      console.log(order)

      // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      return false
    } catch (e) {
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ,
      // —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ä–¥–µ—Ä–∞
    }

    console.log('–¥–∞–ª—å—à–µ –ø–æ—à–µ–ª.....')

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
    let data = candles.filter((item, index) => index <= 30)

    let type = 'buy'

    // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ—à–∏—Ç—å –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å
    if (type === 'buy') {

      // –¢–µ–∫—É—â–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ
      let current = data.shift()

      // –°–æ—Å—Ç–æ—è–Ω–∏–µ
      let state = false

      // –ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
      data.map(item => {
        if (current.price.min < item.price.min) {
          state = true
        }
      })

      if (state) {

        // –ü–æ–∫—É–ø–∞–µ–º
        btce.trade({
          pair: 'btc_usd',
          type: 'sell',
          rate: 2700,
          amount: amount
        }, (err, res) => {
          if (err) {
            console.log(err)
            bot.sendMessage(config.user, `–û—à–∏–±–∫–∞ trade: ${err}`)
            return false
          }

          new models.Order({
            id: res.return.order_id,
            type: 'sell',
            pair: pair,
            rate: 2700,
            amount: amount
          }).save()

          // –û–ø–æ–≤–µ—â–∞–µ–º –æ–± –ø–æ–∫—É–ø–∫–µ
          bot.sendMessage(config.user, `‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É ${amount} BTC –ø–æ –∫—É—Ä—Å—É ${current.price.min}`)

          // bot.sendMessage(config.user, `üí∞ –ö—É–ø–∏–ª–∏ ${amount} BTC –ø–æ –∫—É—Ä—Å—É ${current.price.min}`)
        })

      } else {
        console.log('–ù–µ –≤—ã–≥–æ–¥–Ω–æ')
      }
    } else if (type === 'sell') {

    }
  } catch (e) {
    console.log('trade observe ' + e)
  }
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ
setInterval(() => observe(), 10000)

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
setInterval(() => observeActiveOrders(), 1000)

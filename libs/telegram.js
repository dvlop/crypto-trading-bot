const TelegramBot = require('node-telegram-bot-api')
const moment = require('moment')
const config = require('../conf')
moment.locale('ru')

class Telegram {
  constructor() {
    this.bot = new TelegramBot(config.token, { polling: true })
    this.user = config.user

    // –ö–Ω–æ–ø–∫–∏
    this.buttons = ['‚õè –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏', 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫', 'üíµ –ë–∞–ª–∞–Ω—Å', 'üìÑ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫']

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    this.keyboard('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω', this.buttons)

    // –°—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç
    this.apps = []

    this.router()
  }

  init(app) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç
    this.apps.push(app)
  }

  router() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ telegram —Å–æ–±—ã—Ç–∏–π
    this.bot.on('message', msg => {
      switch (msg.text) {
        case '‚õè –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏':
          return this.task()

        case 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫':
          return this.cashback()

        case 'üíµ –ë–∞–ª–∞–Ω—Å':
          return this.balance()

        case 'üìÑ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫':
          return this.history()
      }
    })
  }

  // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
  task() {
    // –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    const message = this.apps.map(item => {
      if (!item.task) return `${item.pair.toUpperCase()} - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏`
      const [coin] = item.pair.split('_')
      const [, wallet] = item.pair.split('_')

      const state = item.task.currentPrice > item.task.price ? 'üî• +' : 'üò© -'
      const percent = (100 - ((item.task.currentPrice * 100) / item.task.price)).toFixed(2)
      const income = Math.abs(item.task.price - item.task.currentPrice).toFixed(0)
      const minPriceBuy = item.task.minPrice - item.task.currentPrice

      return item.task.type === 'sell'
        ? `${item.pair.toUpperCase()} - üìà –ü—Ä–æ–¥–∞–∂–∞
–û–±—ä–µ–º: ${item.task.amount} ${coin}
–ó–∞–∫—É–ø–∫–∞: ${item.task.buyAmount} ${wallet}
–ü—Ä–æ–¥–∞–∂–∞: ${item.task.price} ${wallet}
–ú–∞–∫—Å. —Ü–µ–Ω–∞: ${item.task.maxPrice} ${wallet}
–ö—É—Ä—Å: ${item.task.currentPrice} ${wallet} (${state}${income} ${wallet}, ${percent}%)
–í—Ä–µ–º—è: ${moment(item.task.timestamp).subtract(1, 'hours').calendar()}`
        : `${item.pair.toUpperCase()} - üìâ –ü–æ–∫—É–ø–∫–∞
–û–±—ä–µ–º: ${item.task.amount} ${coin}
–ú–∏–Ω. —Ü–µ–Ω–∞: ${item.task.minPrice} ${wallet}
–ö—É—Ä—Å: ${item.task.currentPrice} ${wallet} (${minPriceBuy} ${wallet})
–í—Ä–µ–º—è: ${moment(item.task.timestamp).subtract(1, 'hours').calendar()}`
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
    this.keyboard(message.join('\n‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢\n'), this.buttons)
  }

  // –ó–∞—Ä–∞–±–æ—Ç–æ–∫
  cashback() {
    const cashback = this.apps.map(item => ({ type: item.pair.split('_')[1], income: item.income }))
      .reduce((prev, current) => {
        if (!prev) return { [current.type]: current.income }
        if (!prev[current.type]) return { ...prev, [current.type]: current.income }
        return { ...prev, [current.type]: prev[current.type] + current.income }
      }, {}
    )
    
    let message = `–ó–∞—Ä–∞–±–æ—Ç–æ–∫:\n`
    for (let item in cashback) {
      message += `${cashback[item]} ${item}\n`
    }
    
    this.keyboard(message, this.buttons)
  }

  // –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤ 
  async balance() {
    const balance = this.apps.reduce((prev, current) => !prev 
      ? ({ [current.purse]: current }) 
      : ({ ...prev, [current.purse]: current }), {}
    )
    
    let message = `–ë–∞–ª–∞–Ω—Å:\n`
    for (let item in balance) {
      const wallets = await balance[item].getBalance()
      message += `${item}\n${wallets.map(item => `${item.type}: ${item.value}`).join('\n')}\n\n`
    }
    this.keyboard(message, this.buttons)
  }

  // –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
  async history () {
    const accounts = this.apps.reduce((prev, current) => !prev 
      ? ({ [current.purse]: current }) 
      : ({ ...prev, [current.purse]: current }), {}
    )

    let message = `–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:`
    for (let item in accounts) {
      const history = await accounts[item].getHistory()
      message += '\n\n' + accounts[item].login + '\n\n' + history.map(item => 
        `–¢–∏–ø: ${item.type}
–ü–∞—Ä–∞: ${item.pair}
–û–±—ä–µ–º: ${item.amount}
–¶–µ–Ω–∞: ${item.rate}
–í—Ä–µ–º—è: ${moment(item.timestamp * 1000).subtract(1, 'hours').calendar()}`).join('\n‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢\n')
    }

    this.keyboard(message, this.buttons)
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  sendMessage(text) {
    this.bot.sendMessage(config.user, text)
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  keyboard(message, data, inline = 2) {
    let opt = [],
      arr = [],
      i = 0;

    // –ï—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–ª –æ–±—ä–µ–∫—Ç map, –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
    if (!Array.isArray(data)) {
      for (let item in data.children) {
        arr.push(item)
      }
    } else {
      // –ü–æ—Å—Ç—É–ø–∏–ª –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤
      arr = data;
    }

    for (let key of arr) {
      // –ï—Å–ª–∏ inline –±–æ–ª—å—à–µ 1, —Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º inline —ç–ª–µ–º–µ–Ω–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
      if (i < inline && opt[opt.length - 1] !== undefined) {
        opt[opt.length - 1].push({
          text: key
        });
      } else {
        if (i === inline) i = 0;

        opt.push([{
          text: key
        }]);
      }

      i++
    }

    this.bot.sendMessage(this.user, message, {
      parse_mode: 'html',
      reply_markup: {
        keyboard: opt,
        resize_keyboard: true,
        // one_time_keyboard: true
      },
    });
  }
}

module.exports = Telegram